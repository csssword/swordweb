/* Generated by Together */

package com.css.sword.platform.comm.filetemplet.tempfile;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2009 中国软件与技术服务股份有限公司</p>
 * <p>Company: 应用产品研发中心</p>
 * @author wwq
 * @version 1.0
 */

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class PropertiesTempFile extends AbsTempFile/* implements FactoryBean*/ {
	private Map<Object, Object> templetContent = new HashMap<Object, Object>();

	public Object getTempContent() {
		return templetContent;
	}

	//lfw:20050915 删除该方法,采用单个文件手工加载方式
	//    /**
	//     * 自身的一个工厂方法，在第一次初始化时被调用，用来加载.properties文件为map
	//     * @return
	//     */
	public Object getObject() {
		//        for (Iterator iter = getContentList().iterator(); iter.hasNext(); ) {
		//            Properties props = getProperties( (String) iter.next());
		//            processProperties(props);
		//        }
		return this;
	}

	/**
	 * 根据文件名读取文件，产生一个Properties对象
	 */
	/*private Properties getProperties(String fileName) {
		Properties props = new Properties();
		InputStream is = null;
		try {
			FileUtils ft = new FileUtils(fileName);
			is = ft.getInputStream();
			props.load(is);
		} catch (IOException ex) {
			throw new FileTempletException("700", ex);
		} finally {
			try {
				if (is != null) {
					is.close();
				}
			} catch (IOException ex) {
				throw new FileTempletException("701", ex);
			}
		}
		return props;
	}*/

	/**
	 * 处理Properties,更新Map
	 * @param properties
	 */
	public void processProperties(Properties props) {
		//lfw:20050915 代码太罗嗦了,改简单些!
		//        Iterator iter = props.keySet().iterator(); 
		//        while (iter != null && iter.hasNext()) {
		//            String key = (String) iter.next();
		//            String value = props.getProperty(key);
		//            synchronized (templetContent) {
		//                templetContent.put(key, value);
		//            }
		//        }
		//lfw:20050915 这样写简单些!
		if (props != null) {
			synchronized (templetContent) {
				templetContent.putAll(props);
			}
		}
	}

	public Class<? extends PropertiesTempFile> getObjectType() {
		return this.getClass();
	}

	public boolean isSingleton() {
		return true;
	}
}