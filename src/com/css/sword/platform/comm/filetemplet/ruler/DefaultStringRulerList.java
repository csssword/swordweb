/* Generated by Together */

package com.css.sword.platform.comm.filetemplet.ruler;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.css.sword.platform.comm.filetemplet.FileTempletException;
import com.css.sword.platform.comm.filetemplet.ITempFile;
import com.css.sword.platform.comm.util.StringUtils;

/**
 * 
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2009 中国软件与技术服务股份有限公司
 * </p>
 * <p>
 * Company: 应用产品研发中心
 * </p>
 * 
 * @author wwq
 * @version 1.0
 */
public class DefaultStringRulerList extends AbsStringRuler

{

	public Object make(ITempFile tempfile) {
		try {
			String templet = (String) tempfile.getTempContent();
			return makeContent(templet, (List<?>) getParams());
		} catch (java.lang.ClassCastException ex) {
			throw new FileTempletException("703",
					DefaultStringRulerList.class.getName(), tempfile.getClass()
							.getName());

		}

	}

	/**
	 * 把异常定义文件的种的变量替换为具体的值
	 * 
	 * @param original
	 *            String 原始的配置文件中定义的字符串
	 * @param param
	 *            ArrayList 用于替换起始、终止标志所标记的参数地段
	 * @return String 最终的字符串
	 */
	public String makeContent(String original, List<?> param) {
		Map<Object, Integer> flagMap = new HashMap<Object, Integer>();

		int iStart = 0;
		// 遍历字符串种所有的标记
		while ((iStart = original.indexOf(KEY_FLAG_START, iStart + 1)) != -1) {
			int iEnd = original.indexOf(KEY_FLAG_END, iStart);
			// String sChar = original.substring(iStart - 1, iStart + 1);
			char aChar = original.charAt(iStart);
			// char aChar1 = original.charAt(iStart + 1);
			// char aChar2 = original.charAt(iStart - 1);
			// char aChar3 = original.charAt(iStart - 2);
			if (aChar != '\\') {
				String resCode = original.substring(iStart + 1, iEnd);
				flagMap.put("s" + resCode, new Integer(iStart));
				flagMap.put("e" + resCode, new Integer(iEnd));
			}
		}

		// for(int i=0;i<flagMap.size()/2;i++){
		// if(i<param.size()){
		// String resValue = (String) param.get(i);
		// int i_Start = Integer.parseInt((String)flagMap.get("s" + (i+1)));
		// int i_End = ( (Integer) flagMap.get("e" + (i+1))).intValue();
		// original = StringUtils.replaceByPos(original, i_Start, i_End,
		// resValue);
		// }
		// }
		// 用给定的内容替换标记符
		for (int i = param.size() - 1; i >= 0; i--) {
			String resValue = (String) param.get(i);
			if (flagMap.get("s" + (i + 1)) != null) {
				int i_Start = ((Integer) flagMap.get("s" + (i + 1))).intValue();
				int i_End = ((Integer) flagMap.get("e" + (i + 1))).intValue();
				original = StringUtils.replaceByPos(original, i_Start, i_End,
						resValue);
			}
		}
		return original;
	}
}